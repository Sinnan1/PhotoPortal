================================================================================
DASHBOARD AND CARD COMPONENTS - HTML & CSS EXPORT
================================================================================

This file contains all the HTML (JSX/TSX) and CSS code for the dashboard page
and card components. No code has been modified - this is an exact export.

================================================================================
FILE 1: frontend/src/app/(dashboard)/dashboard/page.tsx
================================================================================

// If you want to update your dashboard to use PhotoGrid for gallery previews
"use client";

import { useState, useEffect } from "react";
import { useAuth } from "@/lib/auth-context";
import { useToast } from "@/components/ui/toast";
import { api } from "@/lib/api";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Plus,
  Images,
  Download,
  Calendar,
  MoreHorizontal,
  Eye,
  Heart,
  Star,
  Trash2,
  Users,
} from "lucide-react";
import Link from "next/link";
import Image from "next/image";
import { CreateGalleryModal } from "@/components/create-gallery-modal";
import { GalleryAccessModal } from "@/components/gallery-access-modal";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Share2, Copy } from 'lucide-react';

interface Photo {
  id: string;
  filename: string;
  thumbnailUrl: string;
  originalUrl: string;
  mediumUrl?: string;
  largeUrl?: string;
  createdAt: string;
}

interface Folder {
  id: string;
  name: string;
  coverPhoto?: Photo;
  _count: {
    photos: number;
  };
}

interface Gallery {
  id: string;
  title: string;
  description: string;
  photoCount: number;
  downloadCount: number;
  expiresAt: string | null;
  createdAt: string;
  isExpired: boolean;
  folders?: Folder[]; // Updated to use folders instead of direct photos
  likedBy: { userId: string }[];
  favoritedBy: { userId: string }[];
}

export default function DashboardPage() {
  const { user } = useAuth();
  const { showToast } = useToast();
  const [galleries, setGalleries] = useState<Gallery[]>([]);
  const [loading, setLoading] = useState(true);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showShareModal, setShowShareModal] = useState(false);
  const [showAccessModal, setShowAccessModal] = useState(false);
  const [selectedGallery, setSelectedGallery] = useState<Gallery | null>(null);

  useEffect(() => {
    if (user?.role === "PHOTOGRAPHER") {
      fetchGalleries();
    }
  }, [user]);

  const fetchGalleries = async () => {
    try {
      const response = await api.getGalleries();
      setGalleries(response.data);
    } catch (error) {
      showToast("Failed to load galleries", "error");
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteGallery = async (id: string) => {
    if (!confirm("Are you sure you want to delete this gallery?")) return;

    try {
      await api.deleteGallery(id);
      setGalleries(galleries.filter((g) => g.id !== id));
      showToast("Gallery deleted successfully", "success");
    } catch (error) {
      showToast("Failed to delete gallery", "error");
    }
  };

  const handleLikeGallery = async (galleryId: string) => {
    try {
      const gallery = galleries.find((g) => g.id === galleryId);
      if (!gallery) return;

      const isLiked = gallery.likedBy.some((like) => like.userId === user?.id);

      if (isLiked) {
        await api.unlikeGallery(galleryId);
      } else {
        await api.likeGallery(galleryId);
      }

      fetchGalleries();
    } catch (error) {
      showToast("Failed to update like status", "error");
    }
  };

  const handleShareGallery = (gallery: Gallery) => {
    setSelectedGallery(gallery);
    setShowShareModal(true);
  };

  const handleFavoriteGallery = async (galleryId: string) => {
    try {
      const gallery = galleries.find((g) => g.id === galleryId);
      if (!gallery) return;

      const isFavorited = gallery.favoritedBy.some(
        (favorite) => favorite.userId === user?.id
      );

      if (isFavorited) {
        await api.unfavoriteGallery(galleryId);
      } else {
        await api.favoriteGallery(galleryId);
      }

      fetchGalleries();
    } catch (error) {
      showToast("Failed to update favorite status", "error");
    }
  };

  const handleManageAccess = (gallery: Gallery) => {
    setSelectedGallery(gallery);
    setShowAccessModal(true);
  };


  if (user?.role !== "PHOTOGRAPHER") {
    return (
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900">Access Denied</h1>
          <p className="text-gray-600 mt-2">
            This page is only available to photographers.
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div className="flex justify-between items-center mb-8">
        <div>
          <h1 className="text-3xl font-bold">Dashboard</h1>
          <p className="text-muted-foreground mt-2">Manage your photo galleries</p>
        </div>
        <Button onClick={() => setShowCreateModal(true)}>
          <Plus className="mr-2 h-4 w-4" />
          Create Gallery
        </Button>
      </div>

      {/* Quick Access Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        <Link href="/dashboard/liked">
          <Card className="hover:shadow-lg transition-shadow cursor-pointer">
            <CardContent className="p-6">
              <div className="flex items-center gap-4">
                <div className="p-3 bg-red-100 rounded-full">
                  <Heart className="h-6 w-6 text-red-600" />
                </div>
                <div>
                  <h3 className="text-lg font-semibold text-gray-900">Liked Photos</h3>
                  <p className="text-gray-600">View your liked photos</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </Link>

        <Link href="/dashboard/favorites">
          <Card className="hover:shadow-lg transition-shadow cursor-pointer">
            <CardContent className="p-6">
              <div className="flex items-center gap-4">
                <div className="p-3 bg-yellow-100 rounded-full">
                  <Star className="h-6 w-6 text-yellow-600" />
                </div>
                <div>
                  <h3 className="text-lg font-semibold text-gray-900">Favorites</h3>
                  <p className="text-gray-600">View your favorited photos</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </Link>

        <Link href="/dashboard/posts">
          <Card className="hover:shadow-lg transition-shadow cursor-pointer">
            <CardContent className="p-6">
              <div className="flex items-center gap-4">
                <div className="p-3 bg-purple-100 rounded-full">
                  <Share2 className="h-6 w-6 text-purple-600" />
                </div>
                <div>
                  <h3 className="text-lg font-semibold text-gray-900">For Posts</h3>
                  <p className="text-gray-600">Photos for social media</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </Link>
      </div>

      {/* Galleries Section */}
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-4">Your Galleries</h2>
      </div>

      {loading ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {[...Array(6)].map((_, i) => (
            <Card key={i} className="animate-pulse">
              <CardHeader>
                <div className="h-4 bg-gray-200 rounded w-3/4"></div>
                <div className="h-3 bg-gray-200 rounded w-1/2"></div>
              </CardHeader>
              <CardContent>
                <div className="h-20 bg-gray-200 rounded"></div>
              </CardContent>
            </Card>
          ))}
        </div>
      ) : galleries.length === 0 ? (
        <div className="text-center py-12">
          <Images className="mx-auto h-12 w-12 text-muted-foreground" />
          <h3 className="mt-2 text-sm font-medium">
            No galleries
          </h3>
          <p className="mt-1 text-sm text-muted-foreground">
            Get started by creating a new gallery.
          </p>
          <div className="mt-6">
            <Button onClick={() => setShowCreateModal(true)}>
              <Plus className="mr-2 h-4 w-4" />
              Create Gallery
            </Button>
          </div>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {galleries.map((gallery, index) => (
            <Card
              key={gallery.id}
              className="hover:shadow-lg transition-shadow duration-200"
            >
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-1">
                <div className="flex-1">
                  <CardTitle className="text-base font-semibold text-gray-900 dark:text-white">{gallery.title}</CardTitle>
                  <CardDescription className="line-clamp-1 text-gray-600 dark:text-gray-300 mt-1 text-sm">
                    {gallery.description}
                  </CardDescription>
                </div>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="ghost" size="sm">
                      <MoreHorizontal className="h-4 w-4" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end">
                    <DropdownMenuItem asChild>
                      <Link href={`/gallery/${gallery.id}`}>
                        <Eye className="mr-2 h-4 w-4" />
                        View Gallery
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuItem asChild>
                      <Link href={`/galleries/${gallery.id}/manage`}>
                        Edit Gallery
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuItem
                      onClick={() => handleShareGallery(gallery)}
                    >
                      <Share2 className="mr-2 h-4 w-4" />
                      Share
                    </DropdownMenuItem>
                    <DropdownMenuItem
                      onClick={() => handleManageAccess(gallery)}
                    >
                      <Users className="mr-2 h-4 w-4" />
                      Manage Access
                    </DropdownMenuItem>
                    <DropdownMenuItem
                      onClick={() => handleDeleteGallery(gallery.id)}
                      className="text-red-600"
                    >
                      <Trash2 className="mr-2 h-4 w-4" />
                      Delete Gallery
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </CardHeader>
              <CardContent className="pt-2 pb-3">
                {/* Gallery preview - show cover photo */}
                {gallery.folders && gallery.folders.length > 0 && (
                  <div className="mb-3">
                    <div className="relative aspect-[4/3] bg-gradient-to-br from-gray-100 to-gray-200 rounded-lg overflow-hidden shadow-sm ring-1 ring-gray-200/50">
                      {gallery.folders[0].coverPhoto ? (
                        <Image
                          src={gallery.folders[0].coverPhoto.largeUrl || gallery.folders[0].coverPhoto.mediumUrl || gallery.folders[0].coverPhoto.thumbnailUrl || "/placeholder.svg"}
                          alt={gallery.folders[0].coverPhoto.filename}
                          fill
                          className="object-cover"
                          priority={index === 0}
                          sizes="(max-width: 1024px) 50vw, 25vw"
                        />
                      ) : gallery.folders[0]._count?.photos > 0 ? (
                        // If no cover photo but folder has photos, show a placeholder with photo count
                        <div className="w-full h-full bg-gradient-to-br from-[#425146]/20 to-[#425146]/10 flex items-center justify-center">
                          <div className="text-center">
                            <Images className="w-8 h-8 text-[#425146] mx-auto mb-1" />
                            <p className="text-xs font-medium text-[#425146]">{gallery.folders[0]._count.photos} photos</p>
                          </div>
                        </div>
                      ) : (
                        // Empty folder placeholder
                        <div className="w-full h-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center">
                          <Images className="w-8 h-8 text-gray-400" />
                        </div>
                      )}
                    </div>
                  </div>
                )}

                <div className="flex items-center justify-between text-xs text-gray-500 mb-2 px-1">
                  <div className="flex items-center bg-gray-50 dark:bg-gray-800/50 rounded-full px-2 py-0.5">
                    <Images className="mr-1 h-3 w-3 text-[#425146]" />
                    <span className="font-medium">{gallery.folders?.reduce((sum, folder) => sum + (folder?._count?.photos ?? 0), 0) ?? 0}</span>
                  </div>
                  <div className="flex items-center bg-gray-50 dark:bg-gray-800/50 rounded-full px-2 py-0.5">
                    <Download className="mr-1 h-3 w-3 text-[#425146]" />
                    <span className="font-medium">{gallery.downloadCount}</span>
                  </div>
                </div>

                <div className="flex items-center justify-between">
                  <div className="flex items-center text-xs text-gray-500">
                    <Calendar className="mr-1 h-3 w-3" />
                    {gallery.expiresAt ? (
                      <span>Expires {new Date(gallery.expiresAt).toLocaleDateString()}</span>
                    ) : (
                      <span>No expiry</span>
                    )}
                  </div>

                  {gallery.isExpired && (
                    <Badge variant="destructive" className="text-xs py-0 px-1">Expired</Badge>
                  )}
                </div>

                <div className="flex items-center justify-end gap-1 mt-2 px-1">
                  <Button
                    variant="ghost"
                    size="sm"
                    className="h-6 px-2 text-xs"
                    onClick={() => handleLikeGallery(gallery.id)}
                  >
                    <Heart
                      className={`mr-1 h-3 w-3 ${gallery.likedBy?.some((like) => like.userId === user?.id)
                        ? "text-red-500 fill-current"
                        : ""
                        }`}
                    />
                    {gallery.likedBy?.length || 0}
                  </Button>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="h-6 px-2 text-xs"
                    onClick={() => handleFavoriteGallery(gallery.id)}
                  >
                    <Star
                      className={`mr-1 h-3 w-3 ${gallery.favoritedBy?.some(
                        (favorite) => favorite.userId === user?.id
                      )
                        ? "text-yellow-500 fill-current"
                        : ""
                        }`}
                    />
                    {gallery.favoritedBy?.length || 0}
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}

      <CreateGalleryModal
        open={showCreateModal}
        onOpenChange={setShowCreateModal}
        onSuccess={() => {
          fetchGalleries();
          setShowCreateModal(false);
        }}
      />

      {selectedGallery && (
        <Dialog open={showShareModal} onOpenChange={setShowShareModal}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Share "{selectedGallery.title}"</DialogTitle>
              <DialogDescription>
                Anyone with this link can view the gallery.
              </DialogDescription>
            </DialogHeader>
            <div className="flex items-center space-x-2">
              <Input
                value={`${window.location.origin}/gallery/${selectedGallery.id}`}
                readOnly
              />
              <Button
                onClick={() => {
                  navigator.clipboard.writeText(
                    `${window.location.origin}/gallery/${selectedGallery.id}`
                  );
                  showToast("Link copied to clipboard", "success");
                }}
              >
                <Copy className="h-4 w-4" />
              </Button>
            </div>
          </DialogContent>
        </Dialog>
      )}

      <GalleryAccessModal
        open={showAccessModal}
        onOpenChange={setShowAccessModal}
        galleryId={selectedGallery?.id || ""}
        galleryTitle={selectedGallery?.title || ""}
      />
    </div>
  );
}

================================================================================
FILE 2: frontend/components/ui/card.tsx
================================================================================

import * as React from "react"

import { cn } from "@/lib/utils"

interface CardProps extends React.ComponentProps<"div"> {
  clickable?: boolean;
}

function Card({ className, clickable, ...props }: CardProps) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        clickable && "cursor-pointer hover:shadow-md transition-shadow duration-200 card-clickable",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}

================================================================================
FILE 3: frontend/src/app/globals.css
================================================================================

@import 'tailwindcss';
@import 'tw-animate-css';

@custom-variant dark (&:is(.dark *));

:root {
  /* Light mode - muted gold/beige variations */
  --background: oklch(0.98 0.003 85);
  --foreground: oklch(0.15 0 0);
  --card: oklch(1 0.002 85);
  --card-foreground: oklch(0.15 0 0);
  --popover: oklch(1 0.002 85);
  --popover-foreground: oklch(0.15 0 0);
  /* Brand primary: warm gold */
  --primary: oklch(0.6 0.04 85);
  --primary-foreground: oklch(0.98 0 0);
  --secondary: oklch(0.95 0.008 85);
  --secondary-foreground: oklch(0.2 0 0);
  --muted: oklch(0.93 0.01 85);
  --muted-foreground: oklch(0.45 0 0);
  --accent: oklch(0.88 0.015 85);
  --accent-foreground: oklch(0.15 0 0);
  --destructive: oklch(0.55 0.08 25);
  --destructive-foreground: oklch(0.98 0 0);
  --border: oklch(0.9 0.008 85);
  --input: oklch(0.95 0.005 85);
  --ring: oklch(0.6 0.04 85);
  --chart-1: oklch(0.6 0.04 85);
  --chart-2: oklch(0.65 0.035 85);
  --chart-3: oklch(0.55 0.045 85);
  --chart-4: oklch(0.7 0.03 85);
  --chart-5: oklch(0.5 0.05 85);
  --radius: 0.625rem;
  --sidebar: oklch(0.97 0.005 85);
  --sidebar-foreground: oklch(0.18 0 0);
  --sidebar-primary: oklch(0.6 0.04 85);
  --sidebar-primary-foreground: oklch(0.98 0 0);
  --sidebar-accent: oklch(0.94 0.008 85);
  --sidebar-accent-foreground: oklch(0.2 0 0);
  --sidebar-border: oklch(0.9 0.008 85);
  --sidebar-ring: oklch(0.6 0.04 85);
}

.dark {
  /* Dark Mode - Olive Green Brand Theme */
  /* #425146 olive green converted to oklch: oklch(0.32 0.025 150) */
  /* #90856c mauve/taupe converted to oklch: oklch(0.57 0.02 75) */

  --background: oklch(0.18 0.015 145);
  /* Dark olive-toned background */
  --foreground: oklch(0.95 0.005 145);
  /* Almost white with slight olive tint */
  --card: oklch(0.22 0.018 145);
  /* Slightly lighter dark olive */
  --card-foreground: oklch(0.95 0.005 145);
  --popover: oklch(0.24 0.018 145);
  --popover-foreground: oklch(0.95 0.005 145);

  /* Primary color - Olive Green #425146 */
  --primary: oklch(0.45 0.04 150);
  /* Brightened olive for better visibility */
  --primary-foreground: oklch(0.98 0.01 150);

  /* Secondary color - #90856c Mauve/Taupe */
  --secondary: oklch(0.57 0.02 75);
  --secondary-foreground: oklch(0.15 0.01 75);

  --muted: oklch(0.25 0.015 145);
  --muted-foreground: oklch(0.65 0.01 145);
  --accent: oklch(0.57 0.02 75);
  /* Using secondary color for accents */
  --accent-foreground: oklch(0.15 0.01 75);

  --destructive: oklch(0.55 0.12 15);
  /* Muted red for errors */
  --destructive-foreground: oklch(0.95 0.01 15);

  --border: oklch(0.28 0.015 145);
  --input: oklch(0.24 0.015 145);
  --ring: oklch(0.45 0.04 150);
  /* Olive green for focus rings */

  /* Chart colors with olive/earth tones */
  --chart-1: oklch(0.5 0.06 150);
  /* Olive green */
  --chart-2: oklch(0.6 0.04 75);
  /* Mauve/taupe */
  --chart-3: oklch(0.55 0.08 40);
  /* Warm earth tone */
  --chart-4: oklch(0.52 0.05 120);
  /* Sage green */
  --chart-5: oklch(0.58 0.06 90);
  /* Muted gold */

  --sidebar: oklch(0.2 0.015 145);
  --sidebar-foreground: oklch(0.95 0.005 145);
  --sidebar-primary: oklch(0.45 0.04 150);
  /* Olive green */
  --sidebar-primary-foreground: oklch(0.98 0.01 150);
  --sidebar-accent: oklch(0.57 0.02 75);
  /* Mauve/taupe */
  --sidebar-accent-foreground: oklch(0.15 0.01 75);
  --sidebar-border: oklch(0.28 0.015 145);
  --sidebar-ring: oklch(0.45 0.04 150);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }

  body {
    @apply bg-background text-foreground;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    font-feature-settings: 'cv11', 'ss01';
    font-variation-settings: 'opsz' 32;

    /* Muted gold/beige mesh gradient background */
    background: linear-gradient(135deg,
        oklch(0.85 0.015 85) 0%,
        /* Light gold */
        oklch(0.82 0.018 85) 25%,
        /* Slightly darker gold */
        oklch(0.78 0.022 85) 50%,
        /* Medium gold */
        oklch(0.82 0.018 85) 75%,
        /* Back to slightly darker */
        oklch(0.85 0.015 85) 100%
        /* Light gold */
      );
    background-attachment: fixed;
    min-height: 100vh;
  }

  /* Dark olive-toned gradient background */
  .dark body {
    background: linear-gradient(145deg,
        oklch(0.20 0.018 145) 0%,
        /* Slightly lighter olive-gray */
        oklch(0.18 0.015 145) 35%,
        /* Main dark olive background */
        oklch(0.16 0.020 155) 100%
        /* Deeper olive-gray */
      );
    background-attachment: fixed;
  }
}

@layer components {

  /* Fix gray text classes in dark mode */
  .dark .text-gray-900 {
    color: oklch(0.95 0.005 145) !important;
  }

  .dark .text-gray-800 {
    color: oklch(0.90 0.005 145) !important;
  }

  .dark .text-gray-700 {
    color: oklch(0.85 0.005 145) !important;
  }

  .dark .text-gray-600 {
    color: oklch(0.75 0.005 145) !important;
  }

  .dark .text-gray-500 {
    color: oklch(0.65 0.005 145) !important;
  }

  /* Modernist shimmer animation for skeleton loaders */
  .animate-shimmer {
    animation: shimmer 2s ease-in-out infinite;
  }

  @keyframes shimmer {
    0% {
      transform: translateX(-100%);
    }

    100% {
      transform: translateX(100%);
    }
  }

  /* Smooth transitions for all interactive elements */
  .transition-smooth {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Enhanced photo grid items */
  .photo-grid-item {
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1),
      box-shadow 0.3s cubic-bezier(0.4, 0, 0.2, 1),
      filter 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .photo-grid-item:hover {
    transform: translateY(-8px);
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.15);
    filter: brightness(1.02);
  }

  /* Fun Easter Eggs and Jokes */
  .konami-code {
    animation: rainbow 2s ease-in-out infinite;
  }

  @keyframes rainbow {
    0% {
      filter: hue-rotate(0deg);
    }

    25% {
      filter: hue-rotate(90deg);
    }

    50% {
      filter: hue-rotate(180deg);
    }

    75% {
      filter: hue-rotate(270deg);
    }

    100% {
      filter: hue-rotate(360deg);
    }
  }

  .wedding-joke:hover::after {
    content: "💍 'I do... love this photo!' 💕";
    position: absolute;
    top: -40px;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 8px 12px;
    border-radius: 8px;
    font-size: 12px;
    white-space: nowrap;
    z-index: 1000;
    opacity: 0;
    animation: joke-fade-in 0.3s ease-out forwards;
  }

  @keyframes joke-fade-in {
    to {
      opacity: 1;
      transform: translateX(-50%) translateY(-5px);
    }
  }

  /* Secret photographer jokes */
  .secret-joke {
    position: relative;
    overflow: hidden;
  }

  .secret-joke::before {
    content: "📸";
    position: absolute;
    top: 10px;
    right: 10px;
    opacity: 0;
    transform: scale(0);
    transition: all 0.3s ease;
    z-index: 10;
  }

  .secret-joke:hover::before {
    opacity: 1;
    transform: scale(1) rotate(15deg);
  }

  .secret-joke:hover::after {
    content: "Say cheese! 🧀";
    position: absolute;
    bottom: 10px;
    left: 10px;
    background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
    color: white;
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 10px;
    opacity: 0;
    transform: translateY(10px);
    transition: all 0.3s ease;
    z-index: 10;
  }

  .secret-joke:hover::after {
    opacity: 1;
    transform: translateY(0);
  }

  /* Custom scrollbar styles for folder tiles horizontal scroll */
  .scrollbar-thin {
    scrollbar-width: thin;
  }

  .scrollbar-thin::-webkit-scrollbar {
    height: 6px;
  }

  .scrollbar-thin::-webkit-scrollbar-track {
    background: transparent;
  }

  .scrollbar-thin::-webkit-scrollbar-thumb {
    background: rgba(156, 163, 175, 0.5);
    border-radius: 3px;
  }

  .scrollbar-thin::-webkit-scrollbar-thumb:hover {
    background: rgba(156, 163, 175, 0.7);
  }

  .dark .scrollbar-thin::-webkit-scrollbar-thumb {
    background: rgba(66, 81, 70, 0.5);
    /* Olive-toned scrollbar */
  }

  .dark .scrollbar-thin::-webkit-scrollbar-thumb:hover {
    background: rgba(66, 81, 70, 0.7);
  }

  /* Logo color filter - changes white to #425146 */
  .logo-color-filter {
    filter: brightness(0.3) saturate(2) hue-rotate(80deg) contrast(1.2);
  }
}

================================================================================
END OF EXPORT
================================================================================
