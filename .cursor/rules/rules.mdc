# Photo Gallery Portal Development Rules

## Project Context
You are helping build a photo gallery portal MVP where photographers can upload photos to galleries and share them with clients. The project has a 6-week timeline with a learning developer who knows JavaScript but is new to the full stack.

## Tech Stack (MUST follow exactly)
- **Frontend**: Next.js 14 (App Router) + TypeScript + Tailwind CSS
- **Backend**: Node.js + Express.js + TypeScript  
- **Database**: PostgreSQL with Prisma ORM
- **Storage**: Backblaze B2
- **Auth**: NextAuth.js with JWT
- **Image Processing**: Sharp library
- **Deployment**: Vercel (frontend) + Railway (backend)

## Code Style & Standards

### Code Philosophy
- Write clean, maintainable, and scalable code
- Follow SOLID principles
- Prefer functional and declarative programming patterns over imperative
- Emphasize type safety and static analysis
- Practice component-driven development

### Code Style Rules
- Use tabs for indentation
- Use single quotes for strings (except to avoid escaping)
- Omit semicolons (unless required for disambiguation)
- Always use strict equality (===) instead of loose equality (==)
- Space infix operators and add space after commas
- Keep else statements on the same line as closing curly braces
- Limit line length to 80 characters
- Use trailing commas in multiline object/array literals

### TypeScript Implementation
- Enable strict mode in tsconfig.json
- Define clear interfaces for component props and API responses
- Use type guards to handle undefined/null values safely
- Apply generics for type flexibility where needed
- Prefer interface over type for object structures
- Use TypeScript utility types (Partial, Pick, Omit)

### Naming Conventions
**PascalCase for:**
- Components: `GalleryCard`, `PhotoUpload`
- Type definitions: `UserType`, `GalleryConfig`
- Interfaces: `ApiResponse`, `UserData`

**kebab-case for:**
- Directory names: `photo-gallery`, `user-auth`  
- File names: `gallery-routes.ts`, `photo-controller.ts`

**camelCase for:**
- Variables: `userData`, `galleryList`
- Functions: `handleUpload`, `validateForm`
- Props: `isLoading`, `onSubmit`

**UPPERCASE for:**
- Environment variables: `DATABASE_URL`, `JWT_SECRET`
- Constants: `MAX_FILE_SIZE`, `ALLOWED_FORMATS`

**Specific Patterns:**
- Prefix event handlers with 'handle': `handleClick`, `handleSubmit`
- Prefix boolean variables with verbs: `isLoading`, `hasError`, `canSubmit`
- Prefix custom hooks with 'use': `useAuth`, `useGallery`

### Database & API
- Use Prisma for all database operations
- Follow RESTful API conventions
- Always include proper error handling with try/catch

## File Structure (maintain consistently)
```
backend/
  src/
    routes/          # API route handlers
    controllers/     # Business logic
    middleware/      # Custom middleware
    utils/          # Helper functions
    types/          # TypeScript type definitions
  prisma/           # Database schema and migrations

frontend/
  src/
    app/            # Next.js app router pages
    components/     # Reusable UI components
    lib/            # Utility functions
    types/          # TypeScript types
```

## Development Priorities (in order)
1. **Functionality over aesthetics** (MVP first)
2. **Type safety** (proper TypeScript usage)
3. **Error handling** and user feedback
4. **Security** best practices
5. **Performance** optimization
6. **Code organization** and readability

## Key Features to Remember
- **User roles**: Photographer (creates galleries) vs Client (views galleries)
- **Gallery access control**: passwords, expiry dates, download limits
- **Photo upload**: single and bulk upload to Backblaze B2
- **Image processing**: automatic thumbnail generation
- **Download system**: individual photos and ZIP archives

## Security Requirements
- Always hash passwords with bcrypt
- Use JWT for authentication
- Validate and sanitize all inputs
- Implement proper CORS configuration
- Never expose sensitive data in API responses
- Use environment variables for secrets

## Common Patterns to Follow

### API Route Structure
```typescript
// routes/galleries.ts
import { Router } from 'express';
import { authenticateToken } from '../middleware/auth';

const router = Router();

router.get('/', authenticateToken, async (req, res) => {
  try {
    // Implementation here
    res.json({ success: true, data: result });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});
```

### Database Operations
```typescript
// Always use Prisma
import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

const galleries = await prisma.gallery.findMany({
  where: { photographerId: userId },
  include: { photos: true }
});
```

## React & Next.js Best Practices

### Component Architecture
- Use functional components with TypeScript interfaces
- Define components using the function keyword
- Extract reusable logic into custom hooks
- Use React.memo() strategically for performance
- Implement proper cleanup in useEffect hooks

### Next.js Implementation
- Utilize App Router for routing (our chosen architecture)
- Use Next.js built-in components:
  - Image component for optimized images
  - Link component for client-side navigation
- Default to Server Components
- Use 'use client' directive only when necessary:
  - Event listeners (photo upload interactions)
  - Browser APIs (file handling)
  - State management (gallery state)

### Performance Optimization
- Use useCallback for memoizing callback functions
- Implement useMemo for expensive computations
- Avoid inline function definitions in JSX
- Implement proper key props in lists (avoid using index as key)
- Use lazy loading for images (important for photo galleries)

## Error Handling & Validation

### Form Validation
- Use Zod for schema validation (especially for upload forms)
- Implement proper error messages for user feedback
- Use React Hook Form for form management

### Error Boundaries & API Errors
```typescript
// Standard error response format
try {
  const result = await someAsyncOperation()
  return res.json({ success: true, data: result })
} catch (error) {
  console.error('Operation failed:', error)
  return res.status(500).json({ 
    success: false, 
    error: 'Internal server error' 
  })
}
```

### Input Sanitization
- Implement input sanitization to prevent XSS attacks
- Validate file uploads (type, size, content)
- Sanitize user-generated content (gallery descriptions)

## DO NOT Suggest
- Using any database other than PostgreSQL with Prisma
- Using any storage other than Backblaze B2  
- Adding complex features not in the MVP scope
- Using class-based components in React
- Using vanilla CSS instead of Tailwind
- Skipping TypeScript types
- Using deprecated Node.js patterns

## ALWAYS Suggest
- Proper TypeScript typing with interfaces
- Error boundaries and comprehensive error handling
- Input validation using Zod for forms and API endpoints
- Responsive design with Tailwind CSS (mobile-first approach)
- Loading states and user feedback for all async operations
- Security best practices (input sanitization, XSS prevention)
- Performance considerations:
  - Image optimization and lazy loading
  - Component memoization where appropriate
  - Proper key props for dynamic lists
- Accessibility features:
  - Semantic HTML structure
  - Proper ARIA attributes for complex UI
  - Keyboard navigation support
  - Alt text for images (crucial for photo gallery)
- JSDoc documentation for complex functions

## Learning Context
The developer is learning as they build, so:

### Communication Style
- **Explain WHY** you're suggesting something, not just HOW
- **Break down** complex concepts into smaller steps
- **Provide context** about best practices
- **Suggest learning resources** when introducing new concepts
- **Be patient** with questions about fundamentals
- **Focus on one concept** at a time

### Code Examples
- Always include brief explanations
- Show the implementation
- Explain any new concepts used
- Suggest next steps
- Ask for confirmation before moving forward

## Current Development Phase
**Week 1-2**: Foundation & Authentication
- Keep suggestions aligned with current week's goals
- Don't over-engineer solutions
- Prioritize getting basic functionality working
- Save advanced optimizations for later weeks

## MVP Scope Reminders
This is an **MVP with a tight timeline**:
- Focus on making it work first, then making it pretty
- 3-5 photographers, 10-15 clients initially
- Core features only: auth, galleries, upload, download, access control
- No e-commerce in MVP
- No advanced analytics in MVP

## Response Format Guidelines
When providing code or solutions:

1. **Brief explanation** of the purpose
2. **Implementation** with proper TypeScript
3. **Explanation** of any new concepts
4. **Next steps** suggestion
5. **Confirmation request** before proceeding

## Database Schema Reference
```prisma
model User {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  name        String
  role        Role      @default(CLIENT)
  galleries   Gallery[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Gallery {
  id            String    @id @default(cuid())
  title         String
  description   String?
  password      String?
  expiresAt     DateTime?
  downloadLimit Int?      @default(0)
  downloadCount Int       @default(0)
  photographer  User      @relation(fields: [photographerId], references: [id])
  photographerId String
  photos        Photo[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Photo {
  id           String   @id @default(cuid())
  filename     String
  originalUrl  String
  thumbnailUrl String
  fileSize     Int
  downloadCount Int     @default(0)
  gallery      Gallery  @relation(fields: [galleryId], references: [id])
  galleryId    String
  createdAt    DateTime @default(now())
}

enum Role {
  PHOTOGRAPHER
  CLIENT
}
```

Remember: **MVP first, perfection later!**